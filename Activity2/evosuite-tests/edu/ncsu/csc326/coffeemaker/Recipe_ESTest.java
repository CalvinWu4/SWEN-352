/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 23 01:09:44 EDT 2017
 */

package edu.ncsu.csc326.coffeemaker;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import edu.ncsu.csc326.coffeemaker.exceptions.RecipeException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class Recipe_ESTest extends Recipe_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      recipe0.setName("U");
      recipe0.hashCode();
      assertEquals("U", recipe0.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      recipe0.setPrice("0");
      assertEquals(0, recipe0.getAmtCoffee());
      assertEquals(0, recipe0.getPrice());
      assertEquals(0, recipe0.getAmtMilk());
      assertEquals(0, recipe0.getAmtChocolate());
      assertEquals(0, recipe0.getAmtSugar());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      recipe0.setAmtSugar("0");
      assertEquals(0, recipe0.getAmtMilk());
      assertEquals(0, recipe0.getAmtChocolate());
      assertEquals(0, recipe0.getAmtCoffee());
      assertEquals(0, recipe0.getAmtSugar());
      assertEquals(0, recipe0.getPrice());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      recipe0.setAmtMilk("0");
      assertEquals(0, recipe0.getAmtSugar());
      assertEquals(0, recipe0.getPrice());
      assertEquals(0, recipe0.getAmtMilk());
      assertEquals(0, recipe0.getAmtChocolate());
      assertEquals(0, recipe0.getAmtCoffee());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      recipe0.setAmtCoffee("0");
      assertEquals(0, recipe0.getPrice());
      assertEquals(0, recipe0.getAmtSugar());
      assertEquals(0, recipe0.getAmtMilk());
      assertEquals(0, recipe0.getAmtCoffee());
      assertEquals(0, recipe0.getAmtChocolate());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      recipe0.setAmtChocolate("0");
      assertEquals(0, recipe0.getAmtCoffee());
      assertEquals(0, recipe0.getAmtSugar());
      assertEquals(0, recipe0.getAmtChocolate());
      assertEquals(0, recipe0.getPrice());
      assertEquals(0, recipe0.getAmtMilk());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      recipe0.setName("a");
      recipe0.toString();
      assertEquals("a", recipe0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      recipe0.setName("f");
      recipe0.getName();
      assertEquals("f", recipe0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      try { 
        recipe0.setPrice("");
        fail("Expecting exception: RecipeException");
      
      } catch(RecipeException e) {
         //
         // Price must be a positive integer
         //
         verifyException("edu.ncsu.csc326.coffeemaker.Recipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      try { 
        recipe0.setAmtSugar("");
        fail("Expecting exception: RecipeException");
      
      } catch(RecipeException e) {
         //
         // Units of sugar must be a positive integer
         //
         verifyException("edu.ncsu.csc326.coffeemaker.Recipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      try { 
        recipe0.setAmtMilk("");
        fail("Expecting exception: RecipeException");
      
      } catch(RecipeException e) {
         //
         // Units of milk must be a positive integer
         //
         verifyException("edu.ncsu.csc326.coffeemaker.Recipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      try { 
        recipe0.setAmtCoffee("");
        fail("Expecting exception: RecipeException");
      
      } catch(RecipeException e) {
         //
         // Units of coffee must be a positive integer
         //
         verifyException("edu.ncsu.csc326.coffeemaker.Recipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      try { 
        recipe0.setAmtChocolate("");
        fail("Expecting exception: RecipeException");
      
      } catch(RecipeException e) {
         //
         // Units of chocolate must be a positive integer
         //
         verifyException("edu.ncsu.csc326.coffeemaker.Recipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      recipe0.setName("a");
      Recipe recipe1 = new Recipe();
      boolean boolean0 = recipe0.equals(recipe1);
      assertEquals("a", recipe0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      Recipe recipe1 = new Recipe();
      boolean boolean0 = recipe0.equals(recipe1);
      assertEquals(0, recipe1.getAmtSugar());
      assertEquals(0, recipe1.getPrice());
      assertTrue(boolean0);
      assertEquals(0, recipe1.getAmtChocolate());
      assertEquals(0, recipe1.getAmtCoffee());
      assertEquals(0, recipe1.getAmtMilk());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      boolean boolean0 = recipe0.equals((Object) null);
      assertEquals(0, recipe0.getAmtChocolate());
      assertEquals(0, recipe0.getAmtCoffee());
      assertEquals(0, recipe0.getAmtMilk());
      assertFalse(boolean0);
      assertEquals(0, recipe0.getAmtSugar());
      assertEquals(0, recipe0.getPrice());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      boolean boolean0 = recipe0.equals(recipe0);
      assertEquals(0, recipe0.getAmtMilk());
      assertTrue(boolean0);
      assertEquals(0, recipe0.getAmtChocolate());
      assertEquals(0, recipe0.getAmtCoffee());
      assertEquals(0, recipe0.getAmtSugar());
      assertEquals(0, recipe0.getPrice());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      Object object0 = new Object();
      boolean boolean0 = recipe0.equals(object0);
      assertEquals(0, recipe0.getAmtCoffee());
      assertEquals(0, recipe0.getPrice());
      assertEquals(0, recipe0.getAmtMilk());
      assertEquals(0, recipe0.getAmtSugar());
      assertFalse(boolean0);
      assertEquals(0, recipe0.getAmtChocolate());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      assertEquals(0, recipe0.getPrice());
      
      recipe0.setPrice("1");
      int int0 = recipe0.getPrice();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      recipe0.setName((String) null);
      assertEquals(0, recipe0.getAmtChocolate());
      assertEquals(0, recipe0.getAmtMilk());
      assertEquals(0, recipe0.getPrice());
      assertEquals(0, recipe0.getAmtSugar());
      assertEquals(0, recipe0.getAmtCoffee());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      assertEquals(0, recipe0.getAmtSugar());
      
      recipe0.setAmtSugar("1");
      int int0 = recipe0.getAmtSugar();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      assertEquals(0, recipe0.getAmtMilk());
      
      recipe0.setAmtMilk("1");
      int int0 = recipe0.getAmtMilk();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      assertEquals(0, recipe0.getAmtCoffee());
      
      recipe0.setAmtCoffee("1");
      int int0 = recipe0.getAmtCoffee();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      assertEquals(0, recipe0.getAmtChocolate());
      
      recipe0.setAmtChocolate("1");
      int int0 = recipe0.getAmtChocolate();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      int int0 = recipe0.getAmtSugar();
      assertEquals(0, recipe0.getPrice());
      assertEquals(0, recipe0.getAmtMilk());
      assertEquals(0, recipe0.getAmtChocolate());
      assertEquals(0, int0);
      assertEquals(0, recipe0.getAmtCoffee());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      int int0 = recipe0.getAmtChocolate();
      assertEquals(0, int0);
      assertEquals(0, recipe0.getAmtMilk());
      assertEquals(0, recipe0.getPrice());
      assertEquals(0, recipe0.getAmtCoffee());
      assertEquals(0, recipe0.getAmtSugar());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      recipe0.toString();
      assertEquals(0, recipe0.getAmtChocolate());
      assertEquals(0, recipe0.getAmtCoffee());
      assertEquals(0, recipe0.getAmtMilk());
      assertEquals(0, recipe0.getPrice());
      assertEquals(0, recipe0.getAmtSugar());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      recipe0.getName();
      assertEquals(0, recipe0.getAmtChocolate());
      assertEquals(0, recipe0.getAmtCoffee());
      assertEquals(0, recipe0.getAmtMilk());
      assertEquals(0, recipe0.getPrice());
      assertEquals(0, recipe0.getAmtSugar());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      int int0 = recipe0.getAmtCoffee();
      assertEquals(0, recipe0.getPrice());
      assertEquals(0, int0);
      assertEquals(0, recipe0.getAmtMilk());
      assertEquals(0, recipe0.getAmtSugar());
      assertEquals(0, recipe0.getAmtChocolate());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      int int0 = recipe0.getAmtMilk();
      assertEquals(0, recipe0.getPrice());
      assertEquals(0, recipe0.getAmtSugar());
      assertEquals(0, recipe0.getAmtCoffee());
      assertEquals(0, int0);
      assertEquals(0, recipe0.getAmtChocolate());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      int int0 = recipe0.getPrice();
      assertEquals(0, recipe0.getAmtMilk());
      assertEquals(0, recipe0.getAmtSugar());
      assertEquals(0, recipe0.getAmtCoffee());
      assertEquals(0, recipe0.getAmtChocolate());
      assertEquals(0, int0);
  }
}
