/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 17 22:33:48 EDT 2017
 */

package familytree.model;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.fail;

import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Vector;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = false, useJEE = true) 
public class Person_ESTest extends Person_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Person person0 = new Person("", "", false);
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      gregorianCalendar0.roll(1, 1);
      person0.dateOfDeathEquals(gregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Person person0 = new Person((String) null, "", true);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 1, 1);
      person0.dateOfDeathEquals(gregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Person person0 = new Person("", "", false);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      person0.setDateOfDeath(gregorianCalendar0);
      GregorianCalendar gregorianCalendar1 = new GregorianCalendar(0, 0, (-15));
      person0.dateOfDeathEquals(gregorianCalendar1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Person person0 = new Person("", "", false);
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      gregorianCalendar0.roll(1, 1);
      person0.dateOfBirthEquals(gregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Person.restorePerson(1, "", "", false);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Person person0 = new Person("", "", false);
      person0.isFemale();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Person person0 = new Person("", "", false);
      Person person1 = new Person("", "", true);
      person0.addSpouse(person1);
      person1.getRelationships();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Person person0 = new Person("", " ", true);
      person0.getLastName();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Person person0 = new Person("", "", false);
      person0.getLastName();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Person person0 = Person.restorePerson(0, "", "", false);
      person0.getId();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Person person0 = Person.restorePerson((-1), "", "", true);
      person0.getId();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Person person0 = new Person("", "", true);
      person0.setFirstName((String) null);
      person0.getFirstName();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Person person0 = new Person("2", "", false);
      person0.getFirstName();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Person person0 = new Person("", "", true);
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      gregorianCalendar0.setFirstDayOfWeek((-1));
      person0.setDateOfDeath(gregorianCalendar0);
      person0.getDateOfDeath();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Person person0 = new Person("", "", true);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals(7, person0.getId());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      //  // Unstable assertion: assertNotNull(gregorianCalendar0);
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals(7, person0.getId());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/New_York\",offset=-18000000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/New_York,offset=-18000000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      
      gregorianCalendar0.setLenient(false);
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals(7, person0.getId());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertFalse(gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"America/New_York\",offset=-18000000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/New_York,offset=-18000000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      
      person0.setDateOfBirth(gregorianCalendar0);
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals(7, person0.getId());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertFalse(gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"America/New_York\",offset=-18000000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/New_York,offset=-18000000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      
      GregorianCalendar gregorianCalendar1 = person0.getDateOfBirth();
      //  // Unstable assertion: assertNotNull(gregorianCalendar1);
      //  // Unstable assertion: assertTrue(gregorianCalendar1.equals((Object)gregorianCalendar0));
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals(7, person0.getId());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertFalse(gregorianCalendar1.isLenient());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar1.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"America/New_York\",offset=-18000000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/New_York,offset=-18000000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar1.toString());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar1.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertNotSame(gregorianCalendar1, gregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Person person0 = new Person("", "", false);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(6, person0.getId());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      
      person0.setDateOfBirth((GregorianCalendar) null);
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(6, person0.getId());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      
      // Undeclared exception!
      try { 
        person0.getDateOfBirth();
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Person person0 = new Person("", "", true);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals(5, person0.getId());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      
      person0.setDateOfDeath((GregorianCalendar) null);
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals(5, person0.getId());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      //  // Unstable assertion: assertNotNull(gregorianCalendar0);
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals(5, person0.getId());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/New_York\",offset=-18000000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/New_York,offset=-18000000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      
      // Undeclared exception!
      try { 
        person0.dateOfDeathEquals(gregorianCalendar0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Person person0 = new Person("", "", true);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals(4, person0.getId());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertTrue(person0.isFemale());
      
      // Undeclared exception!
      try { 
        person0.addSpouse((Person) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Person person0 = new Person("", "", false);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals(3, person0.getId());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      
      // Undeclared exception!
      try { 
        person0.addChild((Person) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Person person0 = new Person("", "", false);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals(1, person0.getId());
      
      Person person1 = new Person("", "", false);
      //  // Unstable assertion: assertNotNull(person1);
      //  // Unstable assertion: assertFalse(person1.equals((Object)person0));
      //  // Unstable assertion: assertEquals(0, person1.getGenderAsInt());
      //  // Unstable assertion: assertEquals("male", person1.getGender());
      //  // Unstable assertion: assertEquals("", person1.getFirstName());
      //  // Unstable assertion: assertEquals(2, person1.getId());
      //  // Unstable assertion: assertFalse(person1.isFemale());
      //  // Unstable assertion: assertEquals("", person1.getLastName());
      
      person0.addSpouse(person1);
      //  // Unstable assertion: assertFalse(person0.equals((Object)person1));
      //  // Unstable assertion: assertFalse(person1.equals((Object)person0));
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals(1, person0.getId());
      //  // Unstable assertion: assertEquals(0, person1.getGenderAsInt());
      //  // Unstable assertion: assertEquals("male", person1.getGender());
      //  // Unstable assertion: assertEquals("", person1.getFirstName());
      //  // Unstable assertion: assertEquals(2, person1.getId());
      //  // Unstable assertion: assertFalse(person1.isFemale());
      //  // Unstable assertion: assertEquals("", person1.getLastName());
      //  // Unstable assertion: assertNotSame(person0, person1);
      //  // Unstable assertion: assertNotSame(person1, person0);
      
      Relation relation0 = person0.getRelation(person0);
      //  // Unstable assertion: assertNull(relation0);
      //  // Unstable assertion: assertFalse(person0.equals((Object)person1));
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals(1, person0.getId());
      //  // Unstable assertion: assertNotSame(person0, person1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Person person0 = new Person("", "", false);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals((-1), person0.getId());
      
      Person person1 = new Person("", "", false);
      //  // Unstable assertion: assertNotNull(person1);
      //  // Unstable assertion: assertFalse(person1.equals((Object)person0));
      //  // Unstable assertion: assertEquals("male", person1.getGender());
      //  // Unstable assertion: assertEquals(0, person1.getGenderAsInt());
      //  // Unstable assertion: assertEquals("", person1.getFirstName());
      //  // Unstable assertion: assertFalse(person1.isFemale());
      //  // Unstable assertion: assertEquals("", person1.getLastName());
      //  // Unstable assertion: assertEquals(0, person1.getId());
      
      person0.addSpouse(person1);
      //  // Unstable assertion: assertFalse(person0.equals((Object)person1));
      //  // Unstable assertion: assertFalse(person1.equals((Object)person0));
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals((-1), person0.getId());
      //  // Unstable assertion: assertEquals("male", person1.getGender());
      //  // Unstable assertion: assertEquals(0, person1.getGenderAsInt());
      //  // Unstable assertion: assertEquals("", person1.getFirstName());
      //  // Unstable assertion: assertFalse(person1.isFemale());
      //  // Unstable assertion: assertEquals("", person1.getLastName());
      //  // Unstable assertion: assertEquals(0, person1.getId());
      //  // Unstable assertion: assertNotSame(person0, person1);
      //  // Unstable assertion: assertNotSame(person1, person0);
      
      Relation relation0 = person0.getRelation(person1);
      //  // Unstable assertion: assertNotNull(relation0);
      //  // Unstable assertion: assertFalse(person0.equals((Object)person1));
      //  // Unstable assertion: assertFalse(person1.equals((Object)person0));
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals((-1), person0.getId());
      //  // Unstable assertion: assertEquals("male", person1.getGender());
      //  // Unstable assertion: assertEquals(0, person1.getGenderAsInt());
      //  // Unstable assertion: assertEquals("", person1.getFirstName());
      //  // Unstable assertion: assertFalse(person1.isFemale());
      //  // Unstable assertion: assertEquals("", person1.getLastName());
      //  // Unstable assertion: assertEquals(0, person1.getId());
      //  // Unstable assertion: assertNotSame(person0, person1);
      //  // Unstable assertion: assertNotSame(person1, person0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Person person0 = new Person("", "", false);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals((-2), person0.getId());
      
      Vector vector0 = person0.getRelationships();
      //  // Unstable assertion: assertNotNull(vector0);
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals((-2), person0.getId());
      //  // Unstable assertion: assertEquals("[]", vector0.toString());
      //  // Unstable assertion: assertTrue(vector0.isEmpty());
      //  // Unstable assertion: assertEquals(0, vector0.size());
      //  // Unstable assertion: assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Person person0 = new Person("", "", false);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals((-3), person0.getId());
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      //  // Unstable assertion: assertNotNull(gregorianCalendar0);
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals((-3), person0.getId());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/New_York\",offset=-18000000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/New_York,offset=-18000000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      
      int int0 = gregorianCalendar0.get(0);
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals((-3), person0.getId());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=18000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/New_York\",offset=-18000000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/New_York,offset=-18000000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-18000000,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(1, int0);
      
      boolean boolean0 = person0.dateOfDeathEquals(gregorianCalendar0);
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals((-3), person0.getId());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=18000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/New_York\",offset=-18000000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/New_York,offset=-18000000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-18000000,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Person person0 = new Person("", "", false);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals((-4), person0.getId());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 1, 1);
      //  // Unstable assertion: assertNotNull(gregorianCalendar0);
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/New_York\",offset=-18000000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/New_York,offset=-18000000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      
      GregorianCalendar gregorianCalendar1 = person0.getDateOfDeath();
      //  // Unstable assertion: assertNotNull(gregorianCalendar1);
      //  // Unstable assertion: assertFalse(gregorianCalendar1.equals((Object)gregorianCalendar0));
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals((-4), person0.getId());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertTrue(gregorianCalendar1.isLenient());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/New_York\",offset=-18000000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/New_York,offset=-18000000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar1.toString());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar1.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar1.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertNotSame(gregorianCalendar1, gregorianCalendar0);
      
      gregorianCalendar1.roll(0, 1);
      //  // Unstable assertion: assertFalse(gregorianCalendar1.equals((Object)gregorianCalendar0));
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals((-4), person0.getId());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertTrue(gregorianCalendar1.isLenient());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar1.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/New_York\",offset=-18000000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/New_York,offset=-18000000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-18000000,DST_OFFSET=0]", gregorianCalendar1.toString());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar1.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertNotSame(gregorianCalendar1, gregorianCalendar0);
      
      person0.setDateOfDeath(gregorianCalendar0);
      //  // Unstable assertion: assertFalse(gregorianCalendar0.equals((Object)gregorianCalendar1));
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals((-4), person0.getId());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/New_York\",offset=-18000000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/New_York,offset=-18000000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertNotSame(gregorianCalendar0, gregorianCalendar1);
      
      boolean boolean0 = person0.dateOfDeathEquals(gregorianCalendar1);
      //  // Unstable assertion: assertFalse(gregorianCalendar1.equals((Object)gregorianCalendar0));
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals((-4), person0.getId());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertTrue(gregorianCalendar1.isLenient());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar1.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/New_York\",offset=-18000000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/New_York,offset=-18000000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-18000000,DST_OFFSET=0]", gregorianCalendar1.toString());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar1.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertNotSame(gregorianCalendar1, gregorianCalendar0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Person person0 = new Person("", "", false);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals((-5), person0.getId());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 0, 1);
      //  // Unstable assertion: assertNotNull(gregorianCalendar0);
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/New_York\",offset=-18000000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/New_York,offset=-18000000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      
      boolean boolean0 = person0.dateOfDeathEquals(gregorianCalendar0);
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals((-5), person0.getId());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/New_York\",offset=-18000000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/New_York,offset=-18000000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Person person0 = new Person("", "", false);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertEquals((-6), person0.getId());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar();
      //  // Unstable assertion: assertNotNull(gregorianCalendar0);
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1508294018095,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/New_York\",offset=-18000000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/New_York,offset=-18000000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2017,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=290,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=33,SECOND=38,MILLISECOND=95,ZONE_OFFSET=-18000000,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      
      boolean boolean0 = person0.dateOfDeathEquals(gregorianCalendar0);
      //  // Unstable assertion: assertEquals((-6), person0.getId());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1508294018095,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/New_York\",offset=-18000000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/New_York,offset=-18000000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2017,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=290,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=33,SECOND=38,MILLISECOND=95,ZONE_OFFSET=-18000000,DST_OFFSET=3600000]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Person person0 = new Person("", "", false);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals((-7), person0.getId());
      
      boolean boolean0 = person0.dateOfDeathEquals((Calendar) null);
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals((-7), person0.getId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Person person0 = new Person("", "", true);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals((-8), person0.getId());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      //  // Unstable assertion: assertNotNull(gregorianCalendar0);
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals((-8), person0.getId());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/New_York\",offset=-18000000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/New_York,offset=-18000000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      
      boolean boolean0 = person0.dateOfDeathEquals(gregorianCalendar0);
      //  // Unstable assertion: assertEquals("female", person0.getGender());
      //  // Unstable assertion: assertTrue(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals((-8), person0.getId());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(1, person0.getGenderAsInt());
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/New_York\",offset=-18000000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/New_York,offset=-18000000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Person person0 = new Person("", "", false);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals((-9), person0.getId());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      //  // Unstable assertion: assertNotNull(gregorianCalendar0);
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals((-9), person0.getId());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/New_York\",offset=-18000000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/New_York,offset=-18000000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      
      int int0 = gregorianCalendar0.get(0);
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals((-9), person0.getId());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=18000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/New_York\",offset=-18000000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/New_York,offset=-18000000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-18000000,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(1, int0);
      
      boolean boolean0 = person0.dateOfBirthEquals(gregorianCalendar0);
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals((-9), person0.getId());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=18000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/New_York\",offset=-18000000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/New_York,offset=-18000000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-18000000,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Person person0 = new Person("", "", false);
      //  // Unstable assertion: assertNotNull(person0);
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals((-10), person0.getId());
      
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 1, 1);
      //  // Unstable assertion: assertNotNull(gregorianCalendar0);
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/New_York\",offset=-18000000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/New_York,offset=-18000000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      
      boolean boolean0 = person0.dateOfBirthEquals(gregorianCalendar0);
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals("", person0.getFirstName());
      //  // Unstable assertion: assertEquals("male", person0.getGender());
      //  // Unstable assertion: assertFalse(person0.isFemale());
      //  // Unstable assertion: assertEquals(0, person0.getGenderAsInt());
      //  // Unstable assertion: assertEquals((-10), person0.getId());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertTrue(gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/New_York\",offset=-18000000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/New_York,offset=-18000000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Person person0 = new Person("", "", false);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 0, 1);
      boolean boolean0 = person0.dateOfBirthEquals(gregorianCalendar0);
      //  // Unstable assertion: assertEquals(5, person0.getId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Person person0 = new Person("", "", false);
      GregorianCalendar gregorianCalendar0 = new GregorianCalendar(0, 0, 0);
      boolean boolean0 = person0.dateOfBirthEquals(gregorianCalendar0);
      //  // Unstable assertion: assertEquals(4, person0.getId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Person person0 = new Person("", "", true);
      boolean boolean0 = person0.dateOfBirthEquals((Calendar) null);
      //  // Unstable assertion: assertEquals(10, person0.getId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Person person0 = new Person("", "", true);
      GregorianCalendar gregorianCalendar0 = person0.getDateOfDeath();
      boolean boolean0 = person0.dateOfBirthEquals(gregorianCalendar0);
      //  // Unstable assertion: assertEquals(4, person0.getId());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Person person0 = new Person("", "", true);
      int int0 = person0.getGenderAsInt();
      //  // Unstable assertion: assertEquals(1, int0);
      //  // Unstable assertion: assertEquals(1, person0.getId());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Person person0 = new Person("", "", false);
      int int0 = person0.getGenderAsInt();
      //  // Unstable assertion: assertEquals((-3), person0.getId());
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Person person0 = new Person("", "", true);
      person0.getGender();
      //  // Unstable assertion: assertEquals((-4), person0.getId());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Person person0 = new Person("", "", false);
      person0.getGender();
      //  // Unstable assertion: assertEquals(15, person0.getId());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Person person0 = new Person("", "", false);
      Person person1 = new Person("", "", false);
      person0.addChild(person1);
      person0.getChildren();
      //  // Unstable assertion: assertEquals(45, person0.getId());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Person person0 = new Person("", "", false);
      Person person1 = Person.restorePerson(0, "", "", true);
      person0.addSpouse(person1);
      //  // Unstable assertion: assertEquals("", person1.getFirstName());
      
      person0.getChildren();
      //  // Unstable assertion: assertEquals(11, person0.getId());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Person person0 = new Person("", "", true);
      Person person1 = new Person("", "", false);
      person1.addChild(person0);
      boolean boolean0 = person0.removeRelation(person0);
      //  // Unstable assertion: assertEquals(16, person0.getId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Person person0 = new Person("", "", true);
      Person person1 = new Person("", "", true);
      person0.addChild(person1);
      Person person2 = new Person("", "", false);
      person0.getRelation(person2);
      //  // Unstable assertion: assertEquals(35, person2.getId());
      //  // Unstable assertion: assertEquals(33, person0.getId());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Person person0 = new Person("", "", true);
      Person person1 = new Person("", "", true);
      person0.addSpouse(person1);
      person0.getRelation(person1);
      //  // Unstable assertion: assertEquals(22, person0.getId());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Person person0 = new Person("", "", false);
      Person person1 = new Person("", "", false);
      person0.addSpouse(person1);
      Person person2 = new Person("", "", false);
      person0.addChild(person2);
      person2.addChild(person1);
      //  // Unstable assertion: assertEquals(35, person1.getId());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Person person0 = new Person("", "", true);
      Person person1 = new Person("", "", true);
      Person person2 = new Person("", "", false);
      person0.addChild(person2);
      person0.addChild(person1);
      //  // Unstable assertion: assertEquals(38, person1.getId());
      //  // Unstable assertion: assertEquals(37, person0.getId());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Person person0 = new Person("", "", false);
      Person person1 = new Person("", "", false);
      person0.addSpouse(person1);
      try { 
        person0.addChild(person1);
        fail("Expecting exception: AddRelationException");
      
      } catch(AddRelationException e) {
         //
         // Relation exists or is illegal
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Person person0 = new Person("", "", false);
      try { 
        person0.addSpouse(person0);
        fail("Expecting exception: AddRelationException");
      
      } catch(AddRelationException e) {
         //
         // Relation exists or is illegal
         //
         verifyException("familytree.model.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Person person0 = new Person("", "", true);
      int int0 = person0.getId();
      //  // Unstable assertion: assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Person person0 = new Person("", "", true);
      person0.getFirstName();
      //  // Unstable assertion: assertEquals(51, person0.getId());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Person person0 = new Person("", "", true);
      Person person1 = new Person("", "", true);
      person0.addSpouse(person1);
      boolean boolean0 = person1.removeRelation(person0);
      //  // Unstable assertion: assertEquals(14, person1.getId());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Person person0 = new Person("", "", false);
      person0.toString();
      //  // Unstable assertion: assertEquals((-1), person0.getId());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Person person0 = new Person("", "", false);
      person0.setFemale(true);
      //  // Unstable assertion: assertEquals(9, person0.getId());
      //  // Unstable assertion: assertTrue(person0.isFemale());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Person person0 = new Person("", "", true);
      GregorianCalendar gregorianCalendar0 = person0.getDateOfBirth();
      gregorianCalendar0.setFirstDayOfWeek(0);
      person0.setDateOfBirth(gregorianCalendar0);
      person0.getDateOfBirth();
      //  // Unstable assertion: assertEquals((-49), person0.getId());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Person person0 = new Person("", "", true);
      Person person1 = new Person("", "", true);
      Person person2 = new Person("", "", false);
      person0.addChild(person2);
      person2.addChild(person1);
      person0.addChild(person1);
      //  // Unstable assertion: assertEquals(8, person1.getId());
      //  // Unstable assertion: assertEquals(7, person0.getId());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Person person0 = new Person((String) null, (String) null, false);
      person0.getLastName();
      //  // Unstable assertion: assertEquals((-7), person0.getId());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Person person0 = new Person("", "", true);
      person0.setLastName("");
      //  // Unstable assertion: assertEquals(14, person0.getId());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Person person0 = new Person("", "", true);
      boolean boolean0 = person0.isFemale();
      //  // Unstable assertion: assertEquals("", person0.getLastName());
      //  // Unstable assertion: assertEquals(1, person0.getId());
      //  // Unstable assertion: assertTrue(boolean0);
  }
}
